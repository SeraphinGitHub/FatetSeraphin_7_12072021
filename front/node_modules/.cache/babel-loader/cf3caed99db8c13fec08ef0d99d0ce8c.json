{"remainingRequest":"E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\node_modules\\babel-loader\\lib\\index.js!E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\src\\routesAPI.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\src\\routesAPI.vue","mtime":1627513379605},{"path":"E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1626466876000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\src\\routesAPI.vue"],"names":[],"mappings":"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","sourcesContent":["\r\n<script>\r\nmodule.exports = {\r\n\r\nmethods: {\r\nroutesAPI() {\r\n\r\n    const fromAPI = \"http://localhost:3000/api\";\r\n\r\n    // ========== GET ==========\r\n    const read_Base = async (url) => {\r\n        \r\n        return await fetch(url)\r\n        .then(response => response.json())\r\n        .then(data => { return data });\r\n    }\r\n\r\n\r\n    // ========== POST / PUT / DELETE ==========\r\n    const write_Base = async (url, data, method) => {\r\n        \r\n        const response = await fetch(url, {\r\n            headers: {\"Content-Type\": \"application/json; charset=UTF-8\"},\r\n            method: method,\r\n            body: JSON.stringify({ data }) // ==> data = {object}\r\n        });\r\n        \r\n        try { return await response.json() }\r\n        catch(error) { console.log(\"error\", error) }\r\n        return {}\r\n    }\r\n\r\n\r\n    // ========== POST / PUT / DELETE ==========\r\n    const write_Base_WithID = async (url, data, postId, method) => {\r\n        \r\n        const response = await fetch(url, {\r\n            headers: {\"Content-Type\": \"application/json; charset=UTF-8\"},\r\n            method: method,\r\n            body: JSON.stringify({ data, postId }) // ==> data = {object}, postId = [array]\r\n        });\r\n        \r\n        try { return await response.json() }\r\n        catch(error) { console.log(\"error\", error) }\r\n        return {}\r\n    }\r\n\r\n\r\n    // ==================================================================================\r\n    // ==> USER\r\n    // ==================================================================================\r\n    const signinUser_API = async (formData) => write_Base(`${fromAPI}/auth/signin`, formData, \"POST\");\r\n    // ----------------------------------------------------------------------------------\r\n    const loginUser_API = async (formData) => write_Base(`${fromAPI}/auth/login`, formData, \"POST\");\r\n    // ----------------------------------------------------------------------------------\r\n    const logoutUser_API = async () => write_Base(`${fromAPI}/auth/logout`, {}, \"POST\");\r\n    // ----------------------------------------------------------------------------------\r\n    const wallUser_API = async () => read_Base(`${fromAPI}/auth/wall`);\r\n    // ----------------------------------------------------------------------------------\r\n    const profileUser_API = async () => read_Base(`${fromAPI}/auth/profile`);\r\n    // ----------------------------------------------------------------------------------\r\n    const updateUser_API = async (formData) => write_Base(`${fromAPI}/auth/updateUser`, formData, \"PUT\");\r\n    // ----------------------------------------------------------------------------------\r\n    const updateUserEmail_API = async (formData) => write_Base(`${fromAPI}/auth/updateUser/email`, formData, \"PUT\");\r\n    // ----------------------------------------------------------------------------------\r\n    const updateUserPsw_API = async (formData) => write_Base(`${fromAPI}/auth/updateUser/password`, formData, \"PUT\");\r\n    // ----------------------------------------------------------------------------------\r\n    const deleteUser_API = async (formData) => write_Base(`${fromAPI}/auth/delete`, formData, \"DELETE\");\r\n    // ----------------------------------------------------------------------------------\r\n\r\n\r\n    // ==================================================================================\r\n    //  ==> PUBLISH\r\n    // ==================================================================================\r\n    const getAllPublish_API = async () => read_Base(`${fromAPI}/publish`);\r\n    // ----------------------------------------------------------------------------------\r\n    const createPublish_API = async (formData) => write_Base(`${fromAPI}/publish/create`, formData, \"POST\");\r\n    // ----------------------------------------------------------------------------------\r\n    const modifyPublish_API = async (formData, postId) =>\r\n    write_Base_WithID(`${fromAPI}/publish/modify`, formData, postId, \"PUT\"); // publishId\r\n    // ----------------------------------------------------------------------------------\r\n    const deletePublish_API = async (formData, postId) =>\r\n    write_Base_WithID(`${fromAPI}/publish/delete`, formData, postId, \"DELETE\"); // publishId\r\n    // ----------------------------------------------------------------------------------\r\n\r\n\r\n\r\n    // ==================================================================================\r\n    //  ==> COMMENT\r\n    // ==================================================================================\r\n    const getAllComment_API = async (postId) =>\r\n    write_Base_WithID(`${fromAPI}/comment`, {}, postId, \"POST\"); // publishId\r\n    // ----------------------------------------------------------------------------------\r\n    const createComment_API = async (formData, postId) => \r\n    write_Base_WithID(`${fromAPI}/comment/create`, formData, postId, \"POST\"); // publishId\r\n    // ----------------------------------------------------------------------------------\r\n    const modifyComment_API = async (formData, postId) =>\r\n    write_Base_WithID(`${fromAPI}/comment/modify`, formData, postId, \"PUT\"); // commentId\r\n    // ----------------------------------------------------------------------------------\r\n    const deleteComment_API = async (formData, postId) =>\r\n    write_Base_WithID(`${fromAPI}/comment/delete`, formData, postId, \"DELETE\"); // commentId\r\n    // ----------------------------------------------------------------------------------\r\n}\r\n}\r\n}\r\n</script>"],"sourceRoot":""}]}