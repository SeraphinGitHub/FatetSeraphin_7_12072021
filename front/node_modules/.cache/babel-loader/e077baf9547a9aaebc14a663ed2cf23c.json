{"remainingRequest":"E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\node_modules\\babel-loader\\lib\\index.js!E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\src\\routesAPI.js","dependencies":[{"path":"E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\src\\routesAPI.js","mtime":1627513536985},{"path":"E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["E:/__Web Dev__ Formation/FatetSeraphin_7_12072021/front/src/routesAPI.js"],"names":["fromAPI","read_Base","url","fetch","then","response","json","data","write_Base","method","headers","body","JSON","stringify","console","log","write_Base_WithID","postId","signinUser_API","formData","loginUser_API","logoutUser_API","wallUser_API","profileUser_API","updateUser_API","updateUserEmail_API","updateUserPsw_API","deleteUser_API","getAllPublish_API","createPublish_API","modifyPublish_API","deletePublish_API","getAllComment_API","createComment_API","modifyComment_API","deleteComment_API"],"mappings":"AACA;;;;;;;;AAEA,IAAMA,OAAO,GAAG,2BAAhB,C,CAEA;;AACA,IAAMC,SAAS;AAAA,qEAAG,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEDC,KAAK,CAACD,GAAD,CAAL,CACZE,IADY,CACP,UAAAC,QAAQ;AAAA,qBAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,aADD,EAEZF,IAFY,CAEP,UAAAG,IAAI,EAAI;AAAE,qBAAOA,IAAP;AAAa,aAFhB,CAFC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATN,SAAS;AAAA;AAAA;AAAA,GAAf,C,CAQA;;;AACA,IAAMO,UAAU;AAAA,sEAAG,kBAAON,GAAP,EAAYK,IAAZ,EAAkBE,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEQN,KAAK,CAACD,GAAD,EAAM;AAC9BQ,cAAAA,OAAO,EAAE;AAAC,gCAAgB;AAAjB,eADqB;AAE9BD,cAAAA,MAAM,EAAEA,MAFsB;AAG9BE,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEN,gBAAAA,IAAI,EAAJA;AAAF,eAAf,CAHwB,CAGC;;AAHD,aAAN,CAFb;;AAAA;AAETF,YAAAA,QAFS;AAAA;AAAA;AAAA,mBAQIA,QAAQ,CAACC,IAAT,EARJ;;AAAA;AAAA;;AAAA;AAAA;AAAA;AASAQ,YAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;AATA;AAAA,8CAUR,EAVQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVP,UAAU;AAAA;AAAA;AAAA,GAAhB,C,CAcA;;;AACA,IAAMQ,iBAAiB;AAAA,sEAAG,kBAAOd,GAAP,EAAYK,IAAZ,EAAkBU,MAAlB,EAA0BR,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAECN,KAAK,CAACD,GAAD,EAAM;AAC9BQ,cAAAA,OAAO,EAAE;AAAC,gCAAgB;AAAjB,eADqB;AAE9BD,cAAAA,MAAM,EAAEA,MAFsB;AAG9BE,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEN,gBAAAA,IAAI,EAAJA,IAAF;AAAQU,gBAAAA,MAAM,EAANA;AAAR,eAAf,CAHwB,CAGS;;AAHT,aAAN,CAFN;;AAAA;AAEhBZ,YAAAA,QAFgB;AAAA;AAAA;AAAA,mBAQHA,QAAQ,CAACC,IAAT,EARG;;AAAA;AAAA;;AAAA;AAAA;AAAA;AASPQ,YAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;AATO;AAAA,8CAUf,EAVe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBC,iBAAiB;AAAA;AAAA;AAAA,GAAvB,C,CAcA;AACA;AACA;;;AACA,IAAME,cAAc;AAAA,sEAAG,kBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA,8CAAoBX,UAAU,WAAIR,OAAJ,mBAA2BmB,QAA3B,EAAqC,MAArC,CAA9B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdD,cAAc;AAAA;AAAA;AAAA,GAApB,C,CACA;;;AACA,IAAME,aAAa;AAAA,sEAAG,kBAAOD,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA,8CAAoBX,UAAU,WAAIR,OAAJ,kBAA0BmB,QAA1B,EAAoC,MAApC,CAA9B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbC,aAAa;AAAA;AAAA;AAAA,GAAnB,C,CACA;;;AACA,IAAMC,cAAc;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA,8CAAYb,UAAU,WAAIR,OAAJ,mBAA2B,EAA3B,EAA+B,MAA/B,CAAtB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdqB,cAAc;AAAA;AAAA;AAAA,GAApB,C,CACA;;;AACA,IAAMC,YAAY;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA,8CAAYrB,SAAS,WAAID,OAAJ,gBAArB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZsB,YAAY;AAAA;AAAA;AAAA,GAAlB,C,CACA;;;AACA,IAAMC,eAAe;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA,8CAAYtB,SAAS,WAAID,OAAJ,mBAArB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfuB,eAAe;AAAA;AAAA;AAAA,GAArB,C,CACA;;;AACA,IAAMC,cAAc;AAAA,sEAAG,kBAAOL,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA,8CAAoBX,UAAU,WAAIR,OAAJ,uBAA+BmB,QAA/B,EAAyC,KAAzC,CAA9B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdK,cAAc;AAAA;AAAA;AAAA,GAApB,C,CACA;;;AACA,IAAMC,mBAAmB;AAAA,uEAAG,mBAAON,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAoBX,UAAU,WAAIR,OAAJ,6BAAqCmB,QAArC,EAA+C,KAA/C,CAA9B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAnBM,mBAAmB;AAAA;AAAA;AAAA,GAAzB,C,CACA;;;AACA,IAAMC,iBAAiB;AAAA,uEAAG,mBAAOP,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAoBX,UAAU,WAAIR,OAAJ,gCAAwCmB,QAAxC,EAAkD,KAAlD,CAA9B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBO,iBAAiB;AAAA;AAAA;AAAA,GAAvB,C,CACA;;;AACA,IAAMC,cAAc;AAAA,uEAAG,mBAAOR,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAoBX,UAAU,WAAIR,OAAJ,mBAA2BmB,QAA3B,EAAqC,QAArC,CAA9B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdQ,cAAc;AAAA;AAAA;AAAA,GAApB,C,CACA;AAGA;AACA;AACA;;;AACA,IAAMC,iBAAiB;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAY3B,SAAS,WAAID,OAAJ,cAArB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjB4B,iBAAiB;AAAA;AAAA;AAAA,GAAvB,C,CACA;;;AACA,IAAMC,iBAAiB;AAAA,uEAAG,mBAAOV,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAoBX,UAAU,WAAIR,OAAJ,sBAA8BmB,QAA9B,EAAwC,MAAxC,CAA9B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBU,iBAAiB;AAAA;AAAA;AAAA,GAAvB,C,CACA;;;AACA,IAAMC,iBAAiB;AAAA,uEAAG,mBAAOX,QAAP,EAAiBF,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC1BD,iBAAiB,WAAIhB,OAAJ,sBAA8BmB,QAA9B,EAAwCF,MAAxC,EAAgD,KAAhD,CADS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBa,iBAAiB;AAAA;AAAA;AAAA,GAAvB,C,CACyE;AACzE;;;AACA,IAAMC,iBAAiB;AAAA,uEAAG,mBAAOZ,QAAP,EAAiBF,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC1BD,iBAAiB,WAAIhB,OAAJ,sBAA8BmB,QAA9B,EAAwCF,MAAxC,EAAgD,QAAhD,CADS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBc,iBAAiB;AAAA;AAAA;AAAA,GAAvB,C,CAC4E;AAC5E;AAIA;AACA;AACA;;;AACA,IAAMC,iBAAiB;AAAA,uEAAG,mBAAOf,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC1BD,iBAAiB,WAAIhB,OAAJ,eAAuB,EAAvB,EAA2BiB,MAA3B,EAAmC,MAAnC,CADS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBe,iBAAiB;AAAA;AAAA;AAAA,GAAvB,C,CAC6D;AAC7D;;;AACA,IAAMC,iBAAiB;AAAA,uEAAG,mBAAOd,QAAP,EAAiBF,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC1BD,iBAAiB,WAAIhB,OAAJ,sBAA8BmB,QAA9B,EAAwCF,MAAxC,EAAgD,MAAhD,CADS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBgB,iBAAiB;AAAA;AAAA;AAAA,GAAvB,C,CAC0E;AAC1E;;;AACA,IAAMC,iBAAiB;AAAA,uEAAG,mBAAOf,QAAP,EAAiBF,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC1BD,iBAAiB,WAAIhB,OAAJ,sBAA8BmB,QAA9B,EAAwCF,MAAxC,EAAgD,KAAhD,CADS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBiB,iBAAiB;AAAA;AAAA;AAAA,GAAvB,C,CACyE;AACzE;;;AACA,IAAMC,iBAAiB;AAAA,uEAAG,mBAAOhB,QAAP,EAAiBF,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC1BD,iBAAiB,WAAIhB,OAAJ,sBAA8BmB,QAA9B,EAAwCF,MAAxC,EAAgD,QAAhD,CADS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBkB,iBAAiB;AAAA;AAAA;AAAA,GAAvB,C,CAC4E;AAC5E","sourcesContent":["\r\n\"use strict\"\r\n\r\nconst fromAPI = \"http://localhost:3000/api\";\r\n\r\n// ========== GET ==========\r\nconst read_Base = async (url) => {\r\n    \r\n    return await fetch(url)\r\n    .then(response => response.json())\r\n    .then(data => { return data });\r\n}\r\n\r\n\r\n// ========== POST / PUT / DELETE ==========\r\nconst write_Base = async (url, data, method) => {\r\n    \r\n    const response = await fetch(url, {\r\n        headers: {\"Content-Type\": \"application/json; charset=UTF-8\"},\r\n        method: method,\r\n        body: JSON.stringify({ data }) // ==> data = {object}\r\n    });\r\n    \r\n    try { return await response.json() }\r\n    catch(error) { console.log(\"error\", error) }\r\n    return {}\r\n}\r\n\r\n\r\n// ========== POST / PUT / DELETE ==========\r\nconst write_Base_WithID = async (url, data, postId, method) => {\r\n    \r\n    const response = await fetch(url, {\r\n        headers: {\"Content-Type\": \"application/json; charset=UTF-8\"},\r\n        method: method,\r\n        body: JSON.stringify({ data, postId }) // ==> data = {object}, postId = [array]\r\n    });\r\n    \r\n    try { return await response.json() }\r\n    catch(error) { console.log(\"error\", error) }\r\n    return {}\r\n}\r\n\r\n\r\n// ==================================================================================\r\n// ==> USER\r\n// ==================================================================================\r\nconst signinUser_API = async (formData) => write_Base(`${fromAPI}/auth/signin`, formData, \"POST\");\r\n// ----------------------------------------------------------------------------------\r\nconst loginUser_API = async (formData) => write_Base(`${fromAPI}/auth/login`, formData, \"POST\");\r\n// ----------------------------------------------------------------------------------\r\nconst logoutUser_API = async () => write_Base(`${fromAPI}/auth/logout`, {}, \"POST\");\r\n// ----------------------------------------------------------------------------------\r\nconst wallUser_API = async () => read_Base(`${fromAPI}/auth/wall`);\r\n// ----------------------------------------------------------------------------------\r\nconst profileUser_API = async () => read_Base(`${fromAPI}/auth/profile`);\r\n// ----------------------------------------------------------------------------------\r\nconst updateUser_API = async (formData) => write_Base(`${fromAPI}/auth/updateUser`, formData, \"PUT\");\r\n// ----------------------------------------------------------------------------------\r\nconst updateUserEmail_API = async (formData) => write_Base(`${fromAPI}/auth/updateUser/email`, formData, \"PUT\");\r\n// ----------------------------------------------------------------------------------\r\nconst updateUserPsw_API = async (formData) => write_Base(`${fromAPI}/auth/updateUser/password`, formData, \"PUT\");\r\n// ----------------------------------------------------------------------------------\r\nconst deleteUser_API = async (formData) => write_Base(`${fromAPI}/auth/delete`, formData, \"DELETE\");\r\n// ----------------------------------------------------------------------------------\r\n\r\n\r\n// ==================================================================================\r\n//  ==> PUBLISH\r\n// ==================================================================================\r\nconst getAllPublish_API = async () => read_Base(`${fromAPI}/publish`);\r\n// ----------------------------------------------------------------------------------\r\nconst createPublish_API = async (formData) => write_Base(`${fromAPI}/publish/create`, formData, \"POST\");\r\n// ----------------------------------------------------------------------------------\r\nconst modifyPublish_API = async (formData, postId) =>\r\nwrite_Base_WithID(`${fromAPI}/publish/modify`, formData, postId, \"PUT\"); // publishId\r\n// ----------------------------------------------------------------------------------\r\nconst deletePublish_API = async (formData, postId) =>\r\nwrite_Base_WithID(`${fromAPI}/publish/delete`, formData, postId, \"DELETE\"); // publishId\r\n// ----------------------------------------------------------------------------------\r\n\r\n\r\n\r\n// ==================================================================================\r\n//  ==> COMMENT\r\n// ==================================================================================\r\nconst getAllComment_API = async (postId) =>\r\nwrite_Base_WithID(`${fromAPI}/comment`, {}, postId, \"POST\"); // publishId\r\n// ----------------------------------------------------------------------------------\r\nconst createComment_API = async (formData, postId) => \r\nwrite_Base_WithID(`${fromAPI}/comment/create`, formData, postId, \"POST\"); // publishId\r\n// ----------------------------------------------------------------------------------\r\nconst modifyComment_API = async (formData, postId) =>\r\nwrite_Base_WithID(`${fromAPI}/comment/modify`, formData, postId, \"PUT\"); // commentId\r\n// ----------------------------------------------------------------------------------\r\nconst deleteComment_API = async (formData, postId) =>\r\nwrite_Base_WithID(`${fromAPI}/comment/delete`, formData, postId, \"DELETE\"); // commentId\r\n// ----------------------------------------------------------------------------------"]}]}