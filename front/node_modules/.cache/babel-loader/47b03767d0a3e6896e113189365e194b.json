{"remainingRequest":"E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\node_modules\\babel-loader\\lib\\index.js!E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\src\\routesAPI.js","dependencies":[{"path":"E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\src\\routesAPI.js","mtime":1627840088964},{"path":"E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["E:/__Web Dev__ Formation/FatetSeraphin_7_12072021/front/src/routesAPI.js"],"names":["module","exports","methods","urlAPI","read_Base","url","fetch","headers","Token","credentials","method","body","JSON","stringify","data","then","response","json","write_Base","console","log","write_BaseFiles","delete_Base","delete_Base_WithID","postId","logoutUser_API","wallUser_API","profileUser_API","updateUser_API","formData","updateUserEmail_API","updateUserPsw_API","deleteUser_API","getAllPublish_API","createPublish_API","modifyPublish_API","deletePublish_API","getAllComment_API","createComment_API","modifyComment_API","deleteComment_API"],"mappings":";;;;;;AACAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,OAAO,EAAE;AAELC,IAAAA,MAFK,oBAEI;AAAE,aAAO,2BAAP;AAAoC,KAF1C;AAKL;AACMC,IAAAA,SAND,qBAMWC,GANX,EAMgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEJC,KAAK,CAACD,GAAD,EAAM;AACpBE,kBAAAA,OAAO,EAAE;AAAC,oCAAgB,iCAAjB;AAAoD,qCAAiB,WAAWC;AAAhF,mBADW;AAEpBC,kBAAAA,WAAW,EAAE,SAFO;AAGpBC,kBAAAA,MAAM,EAAEA,MAHY;AAIpBC,kBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeC,IAAf;AAJc,iBAAN,CAAL,CAMZC,IANY,CAMP,UAAAC,QAAQ;AAAA,yBAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,iBAND,EAOZF,IAPY,CAOP,UAAAD,IAAI,EAAI;AAAE,yBAAOA,IAAP;AAAa,iBAPhB,CAFI;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUpB,KAhBI;AAmBL;AACMI,IAAAA,UApBD,sBAoBYb,GApBZ,EAoBiBS,IApBjB,EAoBuBJ,MApBvB,EAoB+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAETJ,KAAK,CAACD,GAAD,EAAM;AAC9BE,kBAAAA,OAAO,EAAE;AAAC,oCAAgB;AAAjB,mBADqB;AAE9BE,kBAAAA,WAAW,EAAE,SAFiB;AAG9BC,kBAAAA,MAAM,EAAEA,MAHsB;AAI9BC,kBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeC,IAAf;AAJwB,iBAAN,CAFI;;AAAA;AAE1BE,gBAAAA,QAF0B;AAAA;AAAA;AAAA,uBASbA,QAAQ,CAACC,IAAT,EATa;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUjBE,gBAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;AAViB;AAAA,kDAWzB,EAXyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYnC,KAhCI;AAkCL;AACMC,IAAAA,eAnCD,2BAmCiBhB,GAnCjB,EAmCsBS,IAnCtB,EAmC4BJ,MAnC5B,EAmCoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEdJ,KAAK,CAACD,GAAD,EAAM;AAC9BE,kBAAAA,OAAO,EAAE;AAAE,oCAAgB;AAAlB,mBADqB;AAE9BE,kBAAAA,WAAW,EAAE,SAFiB;AAG9BC,kBAAAA,MAAM,EAAEA,MAHsB;AAI9BC,kBAAAA,IAAI,EAAEG;AAJwB,iBAAN,CAFS;;AAAA;AAE/BE,gBAAAA,QAF+B;AAAA;AAAA;AAAA,uBASlBA,QATkB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUtBG,gBAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;AAVsB;AAAA,kDAW9B,EAX8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYxC,KA/CI;AAkDL;AACME,IAAAA,WAnDD,uBAmDajB,GAnDb,EAmDkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAENC,KAAK,CAACD,GAAD,EAAM;AACpBE,kBAAAA,OAAO,EAAE;AAAC,oCAAgB;AAAjB,mBADW;AAEpBE,kBAAAA,WAAW,EAAE,SAFO;AAGpBC,kBAAAA,MAAM,EAAE;AAHY,iBAAN,CAFC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOtB,KA1DI;AA6DL;AACMa,IAAAA,kBA9DD,8BA8DoBlB,GA9DpB,EA8DyBmB,MA9DzB,EA8DiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEXlB,KAAK,CAACD,GAAD,EAAM;AAC9BE,kBAAAA,OAAO,EAAE;AAAC,oCAAgB;AAAjB,mBADqB;AAE9BE,kBAAAA,WAAW,EAAE,SAFiB;AAG9BC,kBAAAA,MAAM,EAAE,QAHsB;AAI9BC,kBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeW,MAAf;AAJwB,iBAAN,CAFM;;AAAA;AAE5BR,gBAAAA,QAF4B;AAAA;AAAA;AAAA,uBASfA,QAAQ,CAACC,IAAT,EATe;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUnBE,gBAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;AAVmB;AAAA,kDAW3B,EAX2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYrC,KA1EI;AA6EL;AACA;AACA;AACMK,IAAAA,cAhFD,4BAgFkB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAE,gBAAA,KAAI,CAACP,UAAL,WAAmB,KAAI,CAACf,MAAL,EAAnB,mBAAgD,EAAhD,EAAoD,MAApD;;AAAF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+D,KAhFjF;AAiFL;AACMuB,IAAAA,YAlFD,0BAkFgB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAe,MAAI,CAACtB,SAAL,WAAkB,MAAI,CAACD,MAAL,EAAlB,gBAAf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6D,KAlF7E;AAmFL;AACMwB,IAAAA,eApFD,6BAoFmB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAe,MAAI,CAACvB,SAAL,WAAkB,MAAI,CAACD,MAAL,EAAlB,mBAAf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgE,KApFnF;AAqFL;AACMyB,IAAAA,cAtFD,0BAsFgBC,QAtFhB,EAsF0B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAE,gBAAA,MAAI,CAACR,eAAL,WAAwB,MAAI,CAAClB,MAAL,EAAxB,uBAAyD0B,QAAzD,EAAmE,KAAnE;;AAAF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6E,KAtFvG;AAuFL;AACMC,IAAAA,mBAxFD,+BAwFqBD,QAxFrB,EAwF+B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAE,gBAAA,MAAI,CAACX,UAAL,WAAmB,MAAI,CAACf,MAAL,EAAnB,6BAA0D0B,QAA1D,EAAoE,KAApE;;AAAF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8E,KAxF7G;AAyFL;AACME,IAAAA,iBA1FD,6BA0FmBF,QA1FnB,EA0F6B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAE,gBAAA,MAAI,CAACX,UAAL,WAAmB,MAAI,CAACf,MAAL,EAAnB,gCAA6D0B,QAA7D,EAAuE,KAAvE;;AAAF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiF,KA1F9G;AA2FL;AACMG,IAAAA,cA5FD,4BA4FkB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAE,gBAAA,MAAI,CAACV,WAAL,WAAoB,MAAI,CAACnB,MAAL,EAApB;;AAAF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoD,KA5FtE;AA6FL;AAGA;AACA;AACA;AACM8B,IAAAA,iBAnGD,+BAmGqB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAe,MAAI,CAAC7B,SAAL,WAAkB,MAAI,CAACD,MAAL,EAAlB,cAAf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2D,KAnGhF;AAoGL;AACM+B,IAAAA,iBArGD,6BAqGmBL,QArGnB,EAqG6B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAE,gBAAA,MAAI,CAACR,eAAL,WAAwB,MAAI,CAAClB,MAAL,EAAxB,sBAAwD0B,QAAxD,EAAkE,MAAlE;;AAAF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6E,KArG1G;AAsGL;AACMM,IAAAA,iBAvGD,6BAuGmBN,QAvGnB,EAuG6B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAClC,gBAAA,OAAI,CAACR,eAAL,WAAwB,OAAI,CAAClB,MAAL,EAAxB,sBAAwD0B,QAAxD,EAAkE,KAAlE;;AADkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACwC,KAxGrE;AAwGuE;AAC5E;AACMO,IAAAA,iBA1GD,6BA0GmBZ,MA1GnB,EA0G2B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAChC,gBAAA,OAAI,CAACD,kBAAL,WAA2B,OAAI,CAACpB,MAAL,EAA3B,sBAA2DqB,MAA3D;;AADgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACoC,KA3G/D;AA2GiE;AACtE;AAIA;AACA;AACA;AACMa,IAAAA,iBAnHD,6BAmHmBR,QAnHnB,EAmH6B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9B,gBAAA,OAAI,CAACX,UAAL,WAAmB,OAAI,CAACf,MAAL,EAAnB,eAA4C0B,QAA5C,EAAsD,MAAtD;;AAD8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACiC,KApH9D;AAoHgE;AACrE;AACMS,IAAAA,iBAtHD,6BAsHmBT,QAtHnB,EAsH6B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAClC,gBAAA,OAAI,CAACX,UAAL,WAAmB,OAAI,CAACf,MAAL,EAAnB,sBAAmD0B,QAAnD,EAA6D,MAA7D;;AADkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACoC,KAvHjE;AAuHmE;AACxE;AACMU,IAAAA,iBAzHD,6BAyHmBV,QAzHnB,EAyH6B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAClC,gBAAA,OAAI,CAACX,UAAL,WAAmB,OAAI,CAACf,MAAL,EAAnB,sBAAmD0B,QAAnD,EAA6D,KAA7D;;AADkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACmC,KA1HhE;AA0HkE;AACvE;AACMW,IAAAA,iBA5HD,6BA4HmBhB,MA5HnB,EA4H2B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAChC,gBAAA,OAAI,CAACD,kBAAL,WAA2B,OAAI,CAACpB,MAAL,EAA3B,sBAA2DqB,MAA3D;;AADgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACoC,KA7H/D,CA6HiE;AACtE;;AA9HK;AADI,CAAjB","sourcesContent":["\r\nmodule.exports = { \r\n    methods: {\r\n        \r\n        urlAPI() { return \"http://localhost:3000/api\" },\r\n\r\n\r\n        // ========== GET ==========\r\n        async read_Base(url) {\r\n            \r\n            return await fetch(url, {\r\n                headers: {\"Content-Type\": \"application/json; charset=UTF-8\", \"Authorization\": \"Bearer\" + Token},\r\n                credentials: \"include\",\r\n                method: method,\r\n                body: JSON.stringify(data)\r\n            })\r\n            .then(response => response.json())\r\n            .then(data => { return data });\r\n        },\r\n\r\n\r\n        // ========== POST / PUT ==========\r\n        async write_Base(url, data, method) {\r\n            \r\n            const response = await fetch(url, {\r\n                headers: {\"Content-Type\": \"application/json; charset=UTF-8\"},\r\n                credentials: \"include\",\r\n                method: method,\r\n                body: JSON.stringify(data)\r\n            });\r\n            \r\n            try { return await response.json() }\r\n            catch(error) { console.log(\"error\", error) }\r\n            return {}\r\n        },\r\n\r\n        // ========== POST / PUT ==========\r\n        async write_BaseFiles(url, data, method) {\r\n            \r\n            const response = await fetch(url, {\r\n                headers: { \"Content-Type\": \"multipart/form-data; boundary=something\" },\r\n                credentials: \"include\",\r\n                method: method,\r\n                body: data\r\n            });\r\n            \r\n            try { return await response }\r\n            catch(error) { console.log(\"error\", error) }\r\n            return {}\r\n        },\r\n\r\n\r\n        // ========== DELETE ==========\r\n        async delete_Base(url) {\r\n            \r\n            return await fetch(url, {\r\n                headers: {\"Content-Type\": \"application/json; charset=UTF-8\"},\r\n                credentials: \"include\",\r\n                method: \"DELETE\"\r\n            });\r\n        },\r\n\r\n\r\n        // ========== DELETE ==========\r\n        async delete_Base_WithID(url, postId) {\r\n            \r\n            const response = await fetch(url, {\r\n                headers: {\"Content-Type\": \"application/json; charset=UTF-8\"},\r\n                credentials: \"include\",\r\n                method: \"DELETE\",\r\n                body: JSON.stringify(postId)\r\n            });\r\n            \r\n            try { return await response.json() }\r\n            catch(error) { console.log(\"error\", error) }\r\n            return {}\r\n        },\r\n\r\n        \r\n        // ==================================================================================\r\n        // ==> USER\r\n        // ==================================================================================\r\n        async logoutUser_API() { this.write_Base(`${this.urlAPI()}/auth/logout`, {}, \"POST\") },\r\n        // ----------------------------------------------------------------------------------\r\n        async wallUser_API() { return await this.read_Base(`${this.urlAPI()}/auth/wall`) },\r\n        // ----------------------------------------------------------------------------------\r\n        async profileUser_API() { return await this.read_Base(`${this.urlAPI()}/auth/profile`) },\r\n        // ----------------------------------------------------------------------------------\r\n        async updateUser_API(formData) { this.write_BaseFiles(`${this.urlAPI()}/auth/updateUser`, formData, \"PUT\") },\r\n        // ----------------------------------------------------------------------------------\r\n        async updateUserEmail_API(formData) { this.write_Base(`${this.urlAPI()}/auth/updateUser/email`, formData, \"PUT\") },\r\n        // ----------------------------------------------------------------------------------\r\n        async updateUserPsw_API(formData) { this.write_Base(`${this.urlAPI()}/auth/updateUser/password`, formData, \"PUT\") },\r\n        // ----------------------------------------------------------------------------------\r\n        async deleteUser_API() { this.delete_Base(`${this.urlAPI()}/auth/delete`) },\r\n        // ----------------------------------------------------------------------------------\r\n\r\n\r\n        // ==================================================================================\r\n        //  ==> PUBLISH\r\n        // ==================================================================================\r\n        async getAllPublish_API() { return await this.read_Base(`${this.urlAPI()}/publish`) },\r\n        // ----------------------------------------------------------------------------------\r\n        async createPublish_API(formData) { this.write_BaseFiles(`${this.urlAPI()}/publish/create`, formData, \"POST\") },\r\n        // ----------------------------------------------------------------------------------\r\n        async modifyPublish_API(formData) {\r\n        this.write_BaseFiles(`${this.urlAPI()}/publish/modify`, formData, \"PUT\") }, // publishId\r\n        // ----------------------------------------------------------------------------------\r\n        async deletePublish_API(postId) {\r\n        this.delete_Base_WithID(`${this.urlAPI()}/publish/delete`, postId) }, // publishId\r\n        // ----------------------------------------------------------------------------------\r\n\r\n\r\n\r\n        // ==================================================================================\r\n        //  ==> COMMENT\r\n        // ==================================================================================\r\n        async getAllComment_API(formData) {\r\n            this.write_Base(`${this.urlAPI()}/comment`, formData, \"POST\") }, // publishId\r\n        // ----------------------------------------------------------------------------------\r\n        async createComment_API(formData) { \r\n        this.write_Base(`${this.urlAPI()}/comment/create`, formData, \"POST\") }, // publishId\r\n        // ----------------------------------------------------------------------------------\r\n        async modifyComment_API(formData) {\r\n        this.write_Base(`${this.urlAPI()}/comment/modify`, formData, \"PUT\") }, // commentId\r\n        // ----------------------------------------------------------------------------------\r\n        async deleteComment_API(postId) {\r\n        this.delete_Base_WithID(`${this.urlAPI()}/comment/delete`, postId) }, // commentId\r\n        // ----------------------------------------------------------------------------------\r\n    }\r\n}"]}]}