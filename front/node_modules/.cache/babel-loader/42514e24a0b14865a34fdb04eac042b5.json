{"remainingRequest":"E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\node_modules\\babel-loader\\lib\\index.js!E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\src\\mixinRoutesAPI.js","dependencies":[{"path":"E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\src\\mixinRoutesAPI.js","mtime":1627578826884},{"path":"E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\__Web Dev__ Formation\\FatetSeraphin_7_12072021\\front\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["E:/__Web Dev__ Formation/FatetSeraphin_7_12072021/front/src/mixinRoutesAPI.js"],"names":["module","exports","methods","urlAPI","read_Base","url","fetch","then","response","json","data","write_Base","method","headers","credentials","body","JSON","stringify","console","log","write_Base_WithID","postId","signinUser_API","formData","loginUser_API","logoutUser_API","wallUser_API","profileUser_API","updateUser_API","updateUserEmail_API","updateUserPsw_API","deleteUser_API","getAllPublish_API","createPublish_API","modifyPublish_API","deletePublish_API","getAllComment_API","createComment_API","modifyComment_API","deleteComment_API"],"mappings":"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","sourcesContent":["\r\nmodule.exports = { \r\n    methods: {\r\n        \r\n        urlAPI() { return \"http://localhost:3000/api\" },\r\n\r\n\r\n        // ========== GET ==========\r\n        async read_Base(url) {\r\n            \r\n            return await fetch(url)\r\n            .then(response => response.json())\r\n            .then(data => { return data });\r\n        },\r\n\r\n\r\n        // ========== POST / PUT / DELETE ==========\r\n        async write_Base(url, data, method) {\r\n            \r\n            const response = await fetch(url, {\r\n                headers: {\"Content-Type\": \"application/json; charset=UTF-8\"},\r\n                credentials: \"include\",\r\n                method: method,\r\n                body: JSON.stringify( data ) // ==> data = {object}\r\n            });\r\n            \r\n            try { return await response.json() }\r\n            catch(error) { console.log(\"error\", error) }\r\n            return {}\r\n        },\r\n\r\n\r\n        // ========== POST / PUT / DELETE ==========\r\n        async write_Base_WithID(url, data, postId, method) {\r\n            \r\n            const response = await fetch(url, {\r\n                headers: {\"Content-Type\": \"application/json; charset=UTF-8\"},\r\n                credentials: \"include\",\r\n                method: method,\r\n                body: JSON.stringify( data, postId ) // ==> data = {object}, postId = [array]\r\n            });\r\n            \r\n            try { return await response.json() }\r\n            catch(error) { console.log(\"error\", error) }\r\n            return {}\r\n        },\r\n\r\n        \r\n        // ==================================================================================\r\n        // ==> USER\r\n        // ==================================================================================\r\n        async signinUser_API(formData) { this.write_Base(`${this.urlAPI()}/auth/signin`, formData, \"POST\") },\r\n\r\n        // ----------------------------------------------------------------------------------\r\n        async loginUser_API(formData) { this.write_Base(`${this.urlAPI()}/auth/login`, formData, \"POST\") },\r\n        \r\n        // ----------------------------------------------------------------------------------\r\n        async logoutUser_API() { this.write_Base(`${this.urlAPI()}/auth/logout`, {}, \"POST\") },\r\n        \r\n        // ----------------------------------------------------------------------------------\r\n        async wallUser_API() { this.read_Base(`${this.urlAPI()}/auth/wall`) },\r\n        \r\n        // ----------------------------------------------------------------------------------\r\n        async profileUser_API() { this.read_Base(`${this.urlAPI()}/auth/profile`) },\r\n        \r\n        // ----------------------------------------------------------------------------------\r\n        async updateUser_API(formData) { this.write_Base(`${this.urlAPI()}/auth/updateUser`, formData, \"PUT\") },\r\n        \r\n        // ----------------------------------------------------------------------------------\r\n        async updateUserEmail_API(formData) { this.write_Base(`${this.urlAPI()}/auth/updateUser/email`, formData, \"PUT\") },\r\n        \r\n        // ----------------------------------------------------------------------------------\r\n        async updateUserPsw_API(formData) { this.write_Base(`${this.urlAPI()}/auth/updateUser/password`, formData, \"PUT\") },\r\n        \r\n        // ----------------------------------------------------------------------------------\r\n        async deleteUser_API(formData) { this.write_Base(`${this.urlAPI()}/auth/delete`, formData, \"DELETE\") },\r\n        \r\n        // ----------------------------------------------------------------------------------\r\n\r\n\r\n        // ==================================================================================\r\n        //  ==> PUBLISH\r\n        // ==================================================================================\r\n        async getAllPublish_API() { this.read_Base(`${this.urlAPI()}/publish`) },\r\n        // ----------------------------------------------------------------------------------\r\n\r\n        async createPublish_API(formData) { this.write_Base(`${this.urlAPI()}/publish/create`, formData, \"POST\") },\r\n        // ----------------------------------------------------------------------------------\r\n\r\n        async modifyPublish_API(formData, postId) {\r\n        this.write_Base_WithID(`${this.urlAPI()}/publish/modify`, formData, postId, \"PUT\") }, // publishId\r\n        // ----------------------------------------------------------------------------------\r\n\r\n        async deletePublish_API(formData, postId) {\r\n        this.write_Base_WithID(`${this.urlAPI()}/publish/delete`, formData, postId, \"DELETE\") }, // publishId\r\n        // ----------------------------------------------------------------------------------\r\n\r\n\r\n\r\n        // ==================================================================================\r\n        //  ==> COMMENT\r\n        // ==================================================================================\r\n        async getAllComment_API(postId) {\r\n            this.write_Base_WithID(`${this.urlAPI()}/comment`, {}, postId, \"POST\") }, // publishId\r\n        // ----------------------------------------------------------------------------------\r\n\r\n        async createComment_API(formData, postId) { \r\n        this.write_Base_WithID(`${this.urlAPI()}/comment/create`, formData, postId, \"POST\") }, // publishId\r\n        // ----------------------------------------------------------------------------------\r\n        \r\n        async modifyComment_API(formData, postId) {\r\n        this.write_Base_WithID(`${this.urlAPI()}/comment/modify`, formData, postId, \"PUT\") }, // commentId\r\n        // ----------------------------------------------------------------------------------\r\n\r\n        async deleteComment_API(formData, postId) {\r\n        this.write_Base_WithID(`${this.urlAPI()}/comment/delete`, formData, postId, \"DELETE\") }, // commentId\r\n        // ----------------------------------------------------------------------------------\r\n    }\r\n}"]}]}